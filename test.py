import math

# FX rate table from the image
fx_rates = [[1.0, 6.88, 1.3257, 3.75075, 17.6595, 1.6764459346186085, 0.9224241306152569, 11.048, 152.87, 23.3683, 20.2307, 10.7433, 376.49, 1.3949, 7.7775, 7.13781, 0.8701, 1.5239256324291375, 0.7734550235903782, 34.3361, 4.0237], [0.14534883720930233, 1.0, 0.1927, 0.0, 2.5669, 0.24365284342868285, 0.13407341860402758, 1.6061, 22.217285047767163, 3.3965, 2.9403, 1.5615, 54.721, 0.20274105911929283, 1.1304, 0.0, 0.1264782141276165, 0.22150356620741596, 0.11242144551494644, 0.0, 0.5848], [0.75431847325941, 5.189413596263622, 1.0, 0.0, 0.0, 1.2645422357106728, 0.6957489737702637, 8.333333333333334, 115.34025374855824, 0.0, 0.0, 0.0, 0.0, 1.0520778537611783, 0.0, 0.0, 0.6563402467839328, 1.1494252873563218, 0.5833965346245843, 0.0, 0.0], [0.26661334399786707, 0.0, 0.0, 1.0, 0.0, 0.0, 0.24593046562015058, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0566267448115745, 0.38957497370368926, 0.0, 0.0, 1.0, 0.09492349166571742, 0.05223023085762039, 0.6255864873318736, 8.65650969529086, 0.0, 0.0, 0.0, 0.0, 0.07898207896628255, 0.0, 0.0, 0.049272977221102625, 0.08628797749609547, 0.043795300764227996, 0.0, 0.0], [0.5965, 4.1042, 0.7908, 0.0, 10.5348, 1.0, 0.5502668794365267, 6.5908, 91.19, 13.94, 12.0676, 6.4085, 224.59, 0.832, 4.6385, 0.0, 0.519, 0.9090082719752749, 0.461403589719928, 0.0, 2.4003], [1.0841, 7.4586, 1.4373, 4.06619, 19.146, 1.8173, 1.0, 11.9783, 165.74, 25.3331, 21.9315, 11.6466, 408.14, 1.5121, 8.4308, 7.73814, 0.9433, 1.6519, 0.8385, 37.2238, 4.362], [0.09051412020275162, 0.622626237469647, 0.12, 0.0, 1.5985, 0.15172664926867754, 0.08348430077723884, 1.0, 13.837000138370001, 2.1151, 1.8311, 0.9724, 34.078, 0.12622596973101247, 0.7038, 0.0, 0.07874263756338783, 0.13789299503585217, 0.07000154003388075, 0.0, 0.3642], [0.00654150585464774, 0.04501, 0.00867, 0.0, 0.11552, 0.01096611470555982, 0.006033546518643658, 0.07227, 1.0, 0.1529, 0.13233, 0.07027, 2.4628, 0.009124087591240877, 0.05087, 0.0, 0.005691519635742744, 0.009968102073365232, 0.0050594485201113076, 0.0, 0.02632], [0.04279301446831819, 0.2944207272191962, 0.0, 0.0, 0.0, 0.07173601147776183, 0.03947404778728225, 0.47279088459174506, 6.540222367560497, 1.0, 0.0, 0.0, 0.0, 0.059687238868329946, 0.0, 0.0, 0.03723840023832576, 0.0651890482398957, 0.03309943068979214, 0.0, 0.0], [0.04942982694617586, 0.34010135020236026, 0.0, 0.0, 0.0, 0.08286651861182008, 0.04559651642614504,



# Step 1: Convert FX rates to negative log weights
vertices = len(fx_rates)
edges = []

for i in range(vertices):
    for j in range(vertices):
        if i != j and fx_rates[i][j] > 0:
            weight = -math.log(fx_rates[i][j])
            edges.append((i, j, weight))

# Step 2: Bellman-Ford function to detect negative cycles involving the source


def bellman_ford(vertices, edges, start):
    # Initialize distances and predecessors
    distance = [float("inf")] * vertices
    predecessor = [-1] * vertices
    distance[start] = 0
    last_updated_node = -1

    # Relax edges (V-1) times
    for _ in range(vertices - 1):
        for u, v, weight in edges:
            if distance[u] != float("inf") and weight != 0 and distance[u] + weight < distance[v]:
                distance[v] = distance[u] + weight
                predecessor[v] = u

    # Extra relaxation to detect negative cycles
    for u, v, weight in edges:
        if distance[u] != float("inf") and weight != 0 and distance[u] + weight < distance[v]:
            last_updated_node = v
            break

    # If no negative cycle detected
    if last_updated_node == -1:
        return False, None

    # Step 3: Trace back the cycle and ensure it includes the source node
    return trace_negative_cycle_including_source(predecessor, last_updated_node, start)

# Helper function to trace the negative cycle and check it includes the source


def trace_negative_cycle_including_source(predecessor, start_node, source):
    cycle = []
    x = start_node

    # Move x back for `vertices` steps to ensure it is within the cycle
    for _ in range(len(predecessor)):
        x = predecessor[x]

    # Trace the cycle from the detected starting point
    cycle_start = x
    cycle_nodes = set()  # To check if source is in the cycle
    while True:
        cycle.append(x)
        cycle_nodes.add(x)
        x = predecessor[x]
        if x == cycle_start and len(cycle) > 1:
            cycle.append(x)  # Close the cycle loop for clarity
            break

    # Ensure the cycle contains the source node
    if source in cycle_nodes:
        return True, list(reversed(cycle))

    return False, None


# Running the Bellman-Ford algorithm from the source node
start_vertex = 0
has_arbitrage, cycle = bellman_ford(vertices, edges, start_vertex)
if has_arbitrage:
    print("Arbitrage opportunity detected in cycle involving source:", cycle)
else:
    print("No arbitrage opportunity detected that involves the source")
